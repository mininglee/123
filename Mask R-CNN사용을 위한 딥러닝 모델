import tensorflow as tf
from tensorflow.keras import layers

# U-Net 모델 정의
def unet_model(input_size=(256, 256, 3)):
    inputs = tf.keras.Input(input_size)

    # 인코더 부분
    conv1 = layers.Conv2D(64, 3, activation='relu', padding='same')(inputs)
    conv1 = layers.Conv2D(64, 3, activation='relu', padding='same')(conv1)
    pool1 = layers.MaxPooling2D(pool_size=(2, 2))(conv1)

    conv2 = layers.Conv2D(128, 3, activation='relu', padding='same')(pool1)
    conv2 = layers.Conv2D(128, 3, activation='relu', padding='same')(conv2)
    pool2 = layers.MaxPooling2D(pool_size=(2, 2))(conv2)

    # 디코더 부분
    up1 = layers.UpSampling2D(size=(2, 2))(pool2)
    merge1 = layers.concatenate([conv2, up1], axis=3)
    conv3 = layers.Conv2D(64, 3, activation='relu', padding='same')(merge1)
    conv3 = layers.Conv2D(64, 3, activation='relu', padding='same')(conv3)

    up2 = layers.UpSampling2D(size=(2, 2))(conv3)
    merge2 = layers.concatenate([conv1, up2], axis=3)
    conv4 = layers.Conv2D(32, 3, activation='relu', padding='same')(merge2)
    conv4 = layers.Conv2D(32, 3, activation='relu', padding='same')(conv4)

    outputs = layers.Conv2D(1, 1, activation='sigmoid')(conv4)

    model = tf.keras.Model(inputs=inputs, outputs=outputs)
    return model

# 데이터 준비 (실제로는 더 많은 데이터가 필요)
# X_train: 입력 이미지, y_train: 세분화된 마스크
# ...

# 모델 생성
model = unet_model()

# 모델 컴파일
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# 모델 요약 출력
model.summary()

# 모델 학습 (실제로는 더 많은 에폭이 필요)
model.fit(X_train, y_train, epochs=5, batch_size=16)

# 학습된 모델 저장
model.save_weights("path/to/trained/model_weights.h5")
